/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author myxps
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class RestaurantGUI extends JFrame {
    private ArrayList<MenuItem> menuItems = new ArrayList<>();
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private JList<String> menuList;

    public RestaurantGUI() {
        setTitle("Restaurant Menu - Modern UI");
        setSize(600, 450);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Warna tema
        Color primaryColor = new Color(30, 144, 255);  // Biru Dodger
        Color dangerColor = new Color(220, 53, 69);    // Merah Bootstrap
        Color backgroundColor = new Color(245, 245, 250);

        // Font custom
        Font titleFont = new Font("Segoe UI", Font.BOLD, 18);
        Font buttonFont = new Font("Segoe UI", Font.PLAIN, 14);

        menuList = new JList<>(listModel);
        menuList.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        menuList.setBackground(new Color(230, 240, 255));

        JScrollPane scrollPane = new JScrollPane(menuList);

        JTextField nameField = new JTextField(20);
        JTextField priceField = new JTextField(20);
        String[] categories = {"Appetizer", "Main Course", "Dessert", "Beverage"};
        JComboBox<String> categoryCombo = new JComboBox<>(categories);

        JButton addButton = new JButton("Add");
        JButton updateButton = new JButton("Update");
        JButton deleteButton = new JButton("Delete");

        addButton.setFont(buttonFont);
        updateButton.setFont(buttonFont);
        deleteButton.setFont(buttonFont);

        styleButton(addButton, primaryColor, Color.WHITE);
        styleButton(updateButton, new Color(255, 193, 7), Color.BLACK);
        styleButton(deleteButton, dangerColor, Color.WHITE);

        JPanel formPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        formPanel.setBackground(backgroundColor);
        formPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(primaryColor, 2), "Menu Form"));
        formPanel.add(new JLabel("Nama Menu:"));
        formPanel.add(nameField);
        formPanel.add(new JLabel("Harga (Rp):"));
        formPanel.add(priceField);
        formPanel.add(new JLabel("Kategori:"));
        formPanel.add(categoryCombo);
        formPanel.add(addButton);
        formPanel.add(updateButton);

        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBackground(backgroundColor);
        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        JLabel headerLabel = new JLabel("Restaurant Menu");
        headerLabel.setFont(titleFont);
        headerLabel.setForeground(primaryColor);

        mainPanel.add(headerLabel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(formPanel, BorderLayout.SOUTH);
        mainPanel.add(deleteButton, BorderLayout.EAST);

        add(mainPanel);

        addButton.addActionListener(e -> handleAdd(nameField, priceField, categoryCombo));
        updateButton.addActionListener(e -> handleUpdate(nameField, priceField, categoryCombo));
        deleteButton.addActionListener(e -> handleDelete(nameField, priceField));

        menuList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                int index = menuList.getSelectedIndex();
                if (index >= 0) {
                    MenuItem item = menuItems.get(index);
                    nameField.setText(item.getName());
                    priceField.setText(String.valueOf(item.getPrice()));
                    categoryCombo.setSelectedItem(item.getCategory());
                }
            }
        }); 
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
       private void styleButton(JButton button, Color bgColor, Color fgColor) {
        button.setBackground(bgColor);
        button.setForeground(fgColor);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
    }

    private void handleAdd(JTextField nameField, JTextField priceField, JComboBox<String> categoryCombo) {
        try {
            String name = nameField.getText().trim();
            double price = Double.parseDouble(priceField.getText().trim());
            String category = (String) categoryCombo.getSelectedItem();

            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nama menu tidak boleh kosong!", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            menuItems.add(new MenuItem(name, price, category));
            refreshList();
            clearFields(nameField, priceField);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Harga harus angka!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleUpdate(JTextField nameField, JTextField priceField, JComboBox<String> categoryCombo) {
        int index = menuList.getSelectedIndex();
        if (index >= 0) {
            try {
                String name = nameField.getText().trim();
                double price = Double.parseDouble(priceField.getText().trim());
                String category = (String) categoryCombo.getSelectedItem();
                menuItems.set(index, new MenuItem(name, price, category));
                refreshList();
                clearFields(nameField, priceField);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Harga harus angka!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih item dulu!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void handleDelete(JTextField nameField, JTextField priceField) {
        int index = menuList.getSelectedIndex();
        if (index >= 0) {
            menuItems.remove(index);
            refreshList();
            clearFields(nameField, priceField);
        } else {
            JOptionPane.showMessageDialog(this, "Pilih item dulu!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void refreshList() {
        listModel.clear();
        for (MenuItem item : menuItems) {
            listModel.addElement(item.toString());
        }
    }

    private void clearFields(JTextField nameField, JTextField priceField) {
        nameField.setText("");
        priceField.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new RestaurantGUI().setVisible(true));
    }
}

class MenuItem {
    private String name;
    private double price;
    private String category;

    public MenuItem(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public String getCategory() {
        return category;
    }

    @Override
    public String toString() {
        return name + " | " + category + " | Rp " + price;
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

